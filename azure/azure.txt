■dockerコンテナを用いたReactの雛形実装
git clone ware-t-robot
cd docker 
docker-compose build
docker-compose run --rm react-app sh -c "npm install -g create-react-app && create-react-app react-sample --template typescript"
docker-compose up








```
$ git clone git@github.com:roshiwata/ware-t-robot.git
$ cd ware-t-robot/docker 
$ docker-compose build
$ docker-compose run --rm react-app sh -c "npm install -g create-react-app && create-react-app react-sample --template typescript"
$ docker-compose up
```

※エラー発生
```
tatsu@tatsu-g15-ubuntu:~/05_azure/all_test_environment/ware-t-robot/docker$ docker-compose up
Starting docker_react-app_1 ... done
Attaching to docker_react-app_1
react-app_1  | yarn run v1.22.18
react-app_1  | $ react-scripts start
react-app_1  | /bin/sh: react-scripts: not found
react-app_1  | error Command failed with exit code 127.
react-app_1  | info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
docker_react-app_1 exited with code 127
```
node_modulesがあるかどうかでこのエラーが発生するかが決まるみたい。















■dockerなしでReactの雛形実装

https://smillione.co.jp/it_blog/3006/

npx, npmのインストールが必要
sudo apt update
sudo apt install nodejs
nodejs -v
sudo apt install npm
node -v
mkdir react-app
cd react-app/
npx create-react-app my-app

※nodeのアップデートが必要らしい
>Create React App requires Node 14 or higher. 
https://note.com/a10bomber/n/ndb8364977a5c

npx create-react-app my-app
cd my-app
npm start



AzureでWebappを作成
webappでgithubを紐付けると.github/workflows/master_wes-robot-webapp2.ymlができる。
これにより、pushしたときにwebappにデプロイされる




https://fwywd.com/tech/deployment-by-azure-app-service-for-nodejs
これを参考に進める方針

OK

package.json の start スクリプトを
Azure で　構成→スタートアップコマンドに入力（node index.js）



＝＝＝＝＝
Azure IoT Hubの使用
https://engineer-ninaritai.com/azure-iothub/



※pythonをインストール
https://websetnet.net/ja/how-to-install-python-3-7-in-ubuntu-linux/



https://github.com/Azure-Samples/azure-iot-samples-python

cd ~/05_azure/azure-iot-samples-python/iot-hub/Quickstarts/simulated-device
python3.8 SimulatedDeviceAsync.py

https://portal.azure.com/#cloudshell/
で
az iot hub monitor-events --device-id ubuntu-dell-g15 --hub-name robot-iot-wakka
をすると見れる。


https://learn.microsoft.com/ja-jp/azure/iot-hub/iot-hub-mqtt-support
websocket=True
を指定するとMQTT over websocket
で通信できる。




=======
クーバネイティすのテスト
https://www.seplus.jp/dokushuzemi/blog/2022/01/aks_tutorial.html

tatsu@tatsu-g15-ubuntu:~$ kubectl apply -f ./deploy.yaml 
error: error parsing ./deploy.yaml: error converting YAML to JSON: yaml: line 17: mapping values are not allowed in this context
ここでStop


azコマンドのインストール
https://learn.microsoft.com/ja-jp/cli/azure/install-azure-cli-linux?pivots=apt

askにデプロイすると、起動すると
localhost:8080でアクセスできて
停止するとアクセスできない。という状態になる。というわけではなさそう。
8080というポートはどのように設定したっけ、、？

kubernetesの基礎知識が必要

wes-robot-kuber-class3
で外部接続できた。
以下のマニフェストファイルで、
kubectl apply -f deploy_mer.yaml
ーーーーーーーー
apiVersion: v1
kind: Service
metadata:
  name: example-nginx
spec:
  type: LoadBalancer
  ports: 
  - port: 80
    targetPort: 80
    protocol: TCP
  selector: 
    app: example-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example-nginx
  template:
    metadata:
      labels:
        app: example-nginx
    spec:
      containers:
      - name: webapp
        image: weswakaconresis.azurecr.io/fordtest-nginx:v1
        ports:
        - containerPort: 80
      imagePullSecrets:
      - name: acr-credential

ーーーーーーーー
その前にすることは
https://www.seplus.jp/dokushuzemi/blog/2022/01/aks_tutorial.html
の通り。
az login
az acr login --name weswakaconresis
docker tag mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine weswakaconresis.azurecr.io/fordtest-nginx:v1
docker push weswakaconresis.azurecr.io/fordtest-nginx:v1

az acr login --name weswakaconresis
az aks get-credentials --resource-group wes-robot-test --name wes-robot-kuber-class3
kubectl create secret docker-registry acr-credential --docker-server=weswakaconresis.azurecr.io --docker-username=weswakaconresis --docker-password=tlZZA7AllDLinG+A+smhpmxTCdl4tGeG5n+kbjUMjs+ACRBs3fSP --docker-email=tatsuhiro.0323@gmail.com

そして、
kubectl apply -f deploy_mer.yaml
で
kubectl get svcによって出てきた
NAME            TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)        AGE
example-nginx   LoadBalancer   10.0.141.126   20.63.175.14   80:31314/TCP   18m
kubernetes      ClusterIP      10.0.0.1       <none>         443/TCP        3h56m

EXTERNAL-IPにブラウザからアクセス（この場合は20.63.175.14）

※デプロイとサービスの様子は以下で確認できる
kubectl describe svc example-nginx
kubectl describe svc example-nginx

この辺chatGPTでいろいろ聞いた。


＝＝＝＝＝＝＝＝
Helmを試す。

メインで参考にするのはこれ
https://zenn.dev/08thse/articles/21-aks-helm-sql-server-2019

az aks get-credentials --resource-group wes-robot-test --name cluster-helm
kubectl get services
起動できている^^

https://level69.net/archives/30110

＝＝＝＝＝＝＝＝

以下で作ったREACTのウェブアプリをAKSにデプロイしたい


https://panasonic-cns.udemy.com/course/modern_javascipt_react_beginner/learn/lecture/21899160#overview


npm パッケージのレジストリ
package.json　設計書的な役割
node_modules　各モジュールの実態　js
package-lock yarnlock

モジュールバンドラー　複数のjsファイルを１つにまとめるためのもの
トランスパイラ　新しいJSの記法を古い記法に変換してくれる

SPA
　HTMLは一つでJSでHTMLを書き換える

var 上書き可能　再宣言可能
let 上書き可能　再宣言不可
const 上書き不可　再宣言不可


05_AzureにREACTで作ったアプリを置いた
react-todo-js



tatsu@tatsu-g15-ubuntu:~/05_azure/react-todo-js$ docker-compose up
で
localhost:3000
で接続可能。


＞code sandboxでReactのWebアプリを作りました。
＞そのWebアプリをローカルのPC上でdockerコンテナ上で実行したいと考えています。
＞node:14.17.5 のdocker imageを元にしてコンテナを作成し、作成したWebアプリ用のフォルダでnpm startを行ったところ、sh: 1: react-scripts: not foundというエラーが出ました。
＞解決方法を教えてください。
に関しては、npm installを実行してnode_moduleが作られた後にnpm startしたらいけるようになった。

react-todo-js_node_1がコンテナ名
これをbuild して　image化したら良さそう

port番号の変え方。
https://qiita.com/urouro_net/items/dd7166f9728d08bc933b







====================

■これを再度使用して作成したコンテナをデプロイ

https://www.seplus.jp/dokushuzemi/blog/2022/01/aks_tutorial.html

ここでイメージを作る
そのためにDockerFileを書き換えた（COPY　で作成）


https://github.com/roshiwata/react-temp/tree/be-image


deploy_mer2.yaml
を用いてデプロイしたところ、以下のようなエラー

tatsu@tatsu-g15-ubuntu:~$ kubectl get pods
NAME                                 READY   STATUS             RESTARTS      AGE
react-todo-sample-6dd89944db-n6z9v   0/1     CrashLoopBackOff   4 (79s ago)   3m13s

tatsu@tatsu-g15-ubuntu:~/05_azure/react-todo-js$ kubectl get svc
NAME                TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)        AGE
kubernetes          ClusterIP      10.0.0.1       <none>          443/TCP        4h32m
react-todo-sample   LoadBalancer   10.0.233.214   20.210.48.225   80:32502/TCP   4m42s


wes-offi-aks-sample5にデプロイ完了
be-image2 にOKのものをpushしました。
そして、be-image3にkubernetesを追加しました。


$ cd 05_azure
$ mkdir test-environment3
$ cd test-environment3
$ git clone git@github.com:roshiwata/react-temp.git
$ cd react-temp
$ git checkout -b be-image3 origin/be-image3
$ docker-compose build
Successfully tagged react-temp_node:latest

$ az login
$ az acr login --name wesoffiresis
$ docker tag react-temp_node:latest wesoffiresis.azurecr.io/react-sample-ok:v1
$ docker push wesoffiresis.azurecr.io/react-sample-ok:v1

AKSを作成（ex. wes-todo-sample）

$ az acr login --name wesoffiresis
$ az aks get-credentials --resource-group wes-offi-p --name wes-todo-sample
$ kubectl create secret docker-registry acr-credential --docker-server=wesoffiresis.azurecr.io --docker-username=wesoffiresis --docker-password=G5U8IlHQZJXHPIi7M01Cjvb9X3l5UZt4/5xTptKZLw+ACRC9JQAz --docker-email=tatsuhiro.0323@gmail.com
$ cd kubernetes
$ kubectl apply -f deploy.yml

kubectl get podsで起動確認
NAME                               READY   STATUS    RESTARTS   AGE
react-todo-sample-cd8798b5-9xl9h   1/1     Running   0          71s

kubectl get svcで外部IPアドレス確認
NAME                TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)        AGE
kubernetes          ClusterIP      10.0.0.1      <none>         443/TCP        4m38s
react-todo-sample   LoadBalancer   10.0.194.36   20.89.189.99   80:32387/TCP   79s

ブラウザにIPアドレスを貼り付けてアクセス

これで、「Reactで作成したWebアプリをコンテナ化してACRにPushし、AKSにデプロイして外部公開」ができた。

次にすること：
　・githubと連携してpushしたら勝手にデプロイされるようにする
　・githubと連携してpushしたら勝手にビルドテストしてくれるようにする
　・外部公開したWebアプリをSSL暗号化

